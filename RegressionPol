#importing the required libraries and classes
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as seabornInstance
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
%matplotlib inline

#creating the data members for the imported classes
le = LabelEncoder()
scaler = StandardScaler()

#reading the data onto a dataframe
dataset = pd.read_csv('C:/Users/Jairam B/Desktop/dataset/train.csv')
dataset.shape
dataset.describe()

#checking the columns to be categorically encoded 
dataset.dtypes

dataset.is_holiday.unique()

dataset.isnull().any()

y = dataset.air_pollution_index #predicted value
x = dataset.copy()
x = x.drop(['air_pollution_index'], axis = 1)
x = x.drop(['date_time'], axis = 1) #dropping columns which are not required 

#caterogircally encoding weather type and holiday using a boolean mask and sklearn
categorical_feature_mask = x.dtypes==object
categorical_cols = x.columns[categorical_feature_mask].tolist()
x[categorical_cols] = x[categorical_cols].apply(lambda col: le.fit_transform(col))

#Dividing the data into testing and training data frames
#80% data is used for training and 20% is used for testing
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

#scaling the data to managable proportions 
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

#running the regression algorithm 
regressor = LinearRegression()  
regressor.fit(X_train, y_train)

#checking coefficients seleccted by the algorithm
coeff_df = pd.DataFrame(regressor.coef_, x.columns, columns=['Coefficient'])  
coeff_df

#calculating predicted value
y_pred = regressor.predict(X_test)

#comparing the actual values to the predicted values
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df.head(25)

df1.plot(kind='bar',figsize=(10,8))
plt.grid(which='major', linestyle='-', linewidth='0.5', color='green')
plt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')
plt.show()

#displaying error in the predicted values 
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
